{
	"name": "dataflow_invoice",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable_PRODUCT_LINE",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SupermarketSales",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_BRANCH",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_CUSTOMER_TYPE",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_GENDER",
						"type": "DatasetReference"
					},
					"name": "source5"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_PAYMENT_TYPE",
						"type": "DatasetReference"
					},
					"name": "source6"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable_INVOICE",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "select2"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "select3"
				},
				{
					"name": "lookup4"
				},
				{
					"name": "select4"
				},
				{
					"name": "lookup5"
				},
				{
					"name": "select5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as long,",
				"          {Product line} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          {Invoice ID} as string,",
				"          Branch as string,",
				"          City as string,",
				"          {Customer type} as string,",
				"          Gender as string,",
				"          {Product line} as string,",
				"          {Unit price} as string,",
				"          Quantity as string,",
				"          {Tax 5%} as string,",
				"          Total as string,",
				"          Date as string,",
				"          Time as string,",
				"          Payment as string,",
				"          cogs as string,",
				"          {gross margin percentage} as string,",
				"          {gross income} as string,",
				"          Rating as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          ID as long,",
				"          Branch as string,",
				"          City as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source(output(",
				"          ID as long,",
				"          {Customer type} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source4",
				"source(output(",
				"          ID as long,",
				"          Gender as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source5",
				"source(output(",
				"          ID as long,",
				"          Payment as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source6",
				"source2, source1 lookup(source2@{Product line} == source1@{Product line},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          {Invoice ID},",
				"          Branch,",
				"          City,",
				"          {Customer type},",
				"          Gender,",
				"          ProductLineID = ID,",
				"          {Unit price},",
				"          Quantity,",
				"          {Tax 5%},",
				"          Total,",
				"          Date,",
				"          Time,",
				"          Payment,",
				"          cogs,",
				"          {gross margin percentage},",
				"          {gross income},",
				"          Rating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, source3 lookup(select1@Branch == source3@Branch,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2 select(mapColumn(",
				"          {Invoice ID},",
				"          BranchID = ID,",
				"          {Customer type},",
				"          Gender,",
				"          ProductLineID,",
				"          {Unit price},",
				"          Quantity,",
				"          {Tax 5%},",
				"          Total,",
				"          Date,",
				"          Time,",
				"          Payment,",
				"          cogs,",
				"          {gross margin percentage},",
				"          {gross income},",
				"          Rating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, source4 lookup(select2@{Customer type} == source4@{Customer type},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup3",
				"lookup3 select(mapColumn(",
				"          {Invoice ID},",
				"          BranchID,",
				"          CustomerTypeID = ID,",
				"          Gender,",
				"          ProductLineID,",
				"          {Unit price},",
				"          Quantity,",
				"          {Tax 5%},",
				"          Total,",
				"          Date,",
				"          Time,",
				"          Payment,",
				"          cogs,",
				"          {gross margin percentage},",
				"          {gross income},",
				"          Rating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3, source5 lookup(select3@Gender == source5@Gender,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup4",
				"lookup4 select(mapColumn(",
				"          {Invoice ID},",
				"          BranchID,",
				"          CustomerTypeID,",
				"          GenderID = ID,",
				"          ProductLineID,",
				"          {Unit price},",
				"          Quantity,",
				"          {Tax 5%},",
				"          Total,",
				"          Date,",
				"          Time,",
				"          Payment,",
				"          cogs,",
				"          {gross margin percentage},",
				"          {gross income},",
				"          Rating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4, source6 lookup(select4@Payment == source6@Payment,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup5",
				"lookup5 select(mapColumn(",
				"          {Invoice ID},",
				"          BranchID,",
				"          CustomerTypeID,",
				"          GenderID,",
				"          ProductLineID,",
				"          {Unit price},",
				"          Quantity,",
				"          {Tax 5%},",
				"          Total,",
				"          Date,",
				"          Time,",
				"          PaymentTypeID = ID,",
				"          cogs,",
				"          {gross margin percentage},",
				"          {gross income},",
				"          Rating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}