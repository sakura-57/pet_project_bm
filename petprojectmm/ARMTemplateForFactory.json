{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "petprojectmm"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/FromBlobToSqlDb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProductLine",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_product_line",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Branch",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_branch",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CustomerType",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_customer_type",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Gender",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_gender",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PaymentType",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_payment_type",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Invoice",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CustomerType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Gender",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ProductLine",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PaymentType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Branch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_invoice",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"source5": {},
									"source6": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-03T10:31:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_product_line')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_branch')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_customer_type')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_gender')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_payment_type')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_invoice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_BRANCH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "BRANCH"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_CUSTOMER_TYPE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "CUSTOMER_TYPE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_GENDER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "GENDER"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_INVOICE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "INVOICE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_PAYMENT_TYPE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "PAYMENT_TYPE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_PRODUCT_LINE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "PRODUCT_LINE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupermarketSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "supermarket_sales.csv",
						"container": "petprojectmm"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Invoice ID",
						"type": "String"
					},
					{
						"name": "Branch",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Customer type",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Product line",
						"type": "String"
					},
					{
						"name": "Unit price",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Tax 5%",
						"type": "String"
					},
					{
						"name": "Total",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Time",
						"type": "String"
					},
					{
						"name": "Payment",
						"type": "String"
					},
					{
						"name": "cogs",
						"type": "String"
					},
					{
						"name": "gross margin percentage",
						"type": "String"
					},
					{
						"name": "gross income",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily_load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "FromBlobToSqlDb",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 6,
						"startTime": "2023-01-04T00:46:00Z",
						"endTime": "2023-01-06T00:46:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FromBlobToSqlDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_branch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SupermarketSales",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_BRANCH",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "surrogateKey2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Invoice ID} as string,",
						"          Branch as string,",
						"          City as string,",
						"          {Customer type} as string,",
						"          Gender as string,",
						"          {Product line} as string,",
						"          {Unit price} as string,",
						"          Quantity as string,",
						"          {Tax 5%} as string,",
						"          Total as string,",
						"          Date as string,",
						"          Time as string,",
						"          Payment as string,",
						"          cogs as string,",
						"          {gross margin percentage} as string,",
						"          {gross income} as string,",
						"          Rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(Branch),",
						"     Quantity = count(Quantity)) ~> aggregate1",
						"aggregate1 keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"source1 aggregate(groupBy(City),",
						"     Quantity = count(Quantity)) ~> aggregate2",
						"aggregate2 keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey2",
						"surrogateKey1, surrogateKey2 lookup(surrogateKey1@ID == surrogateKey2@ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          BranchID = surrogateKey1@ID,",
						"          Branch,",
						"          City",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BranchID,",
						"          Branch,",
						"          City",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SupermarketSales')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_BRANCH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_customer_type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SupermarketSales",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_CUSTOMER_TYPE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Invoice ID} as string,",
						"          Branch as string,",
						"          City as string,",
						"          {Customer type} as string,",
						"          Gender as string,",
						"          {Product line} as string,",
						"          {Unit price} as string,",
						"          Quantity as string,",
						"          {Tax 5%} as string,",
						"          Total as string,",
						"          Date as string,",
						"          Time as string,",
						"          Payment as string,",
						"          cogs as string,",
						"          {gross margin percentage} as string,",
						"          {gross income} as string,",
						"          Rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy({Customer type}),",
						"     Quantity = count(Quantity)) ~> aggregate1",
						"aggregate1 keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          {Customer type}",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SupermarketSales')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_CUSTOMER_TYPE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SupermarketSales",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_GENDER",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Invoice ID} as string,",
						"          Branch as string,",
						"          City as string,",
						"          {Customer type} as string,",
						"          Gender as string,",
						"          {Product line} as string,",
						"          {Unit price} as string,",
						"          Quantity as string,",
						"          {Tax 5%} as string,",
						"          Total as string,",
						"          Date as string,",
						"          Time as string,",
						"          Payment as string,",
						"          cogs as string,",
						"          {gross margin percentage} as string,",
						"          {gross income} as string,",
						"          Rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(Gender),",
						"     Quantity = count(Quantity)) ~> aggregate1",
						"aggregate1 keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Gender",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SupermarketSales')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_GENDER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_invoice')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SupermarketSales",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_BRANCH",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_CUSTOMER_TYPE",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_GENDER",
								"type": "DatasetReference"
							},
							"name": "source4"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_LINE",
								"type": "DatasetReference"
							},
							"name": "source5"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PAYMENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "source6"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_INVOICE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup2"
						},
						{
							"name": "select2"
						},
						{
							"name": "lookup3"
						},
						{
							"name": "select3"
						},
						{
							"name": "lookup4"
						},
						{
							"name": "select4"
						},
						{
							"name": "lookup5"
						},
						{
							"name": "select5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Invoice ID} as string,",
						"          Branch as string,",
						"          City as string,",
						"          {Customer type} as string,",
						"          Gender as string,",
						"          {Product line} as string,",
						"          {Unit price} as string,",
						"          Quantity as string,",
						"          {Tax 5%} as string,",
						"          Total as string,",
						"          Date as string,",
						"          Time as string,",
						"          Payment as string,",
						"          cogs as string,",
						"          {gross margin percentage} as string,",
						"          {gross income} as string,",
						"          Rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          BranchID as long,",
						"          Branch as string,",
						"          City as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source(output(",
						"          ID as long,",
						"          {Customer type} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source(output(",
						"          ID as long,",
						"          Gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source4",
						"source(output(",
						"          ID as long,",
						"          {Product line} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source5",
						"source(output(",
						"          ID as long,",
						"          Payment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source6",
						"source1, source2 lookup(source1@Branch == source2@Branch,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          {Invoice ID},",
						"          BranchID,",
						"          {Customer type},",
						"          Gender,",
						"          {Product line},",
						"          {Unit price},",
						"          Quantity,",
						"          {Tax 5%},",
						"          Total,",
						"          Date,",
						"          Time,",
						"          Payment,",
						"          cogs,",
						"          {gross margin percentage},",
						"          {gross income},",
						"          Rating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, source3 lookup(select1@{Customer type} == source3@{Customer type},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2",
						"lookup2 select(mapColumn(",
						"          {Invoice ID},",
						"          BranchID,",
						"          CustomerTypeID = ID,",
						"          Gender,",
						"          {Product line},",
						"          {Unit price},",
						"          Quantity,",
						"          {Tax 5%},",
						"          Total,",
						"          Date,",
						"          Time,",
						"          Payment,",
						"          cogs,",
						"          {gross margin percentage},",
						"          {gross income},",
						"          Rating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, source4 lookup(select2@Gender == source4@Gender,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup3",
						"lookup3 select(mapColumn(",
						"          {Invoice ID},",
						"          BranchID,",
						"          CustomerTypeID,",
						"          GenderID = ID,",
						"          {Product line},",
						"          {Unit price},",
						"          Quantity,",
						"          {Tax 5%},",
						"          Total,",
						"          Date,",
						"          Time,",
						"          Payment,",
						"          cogs,",
						"          {gross margin percentage},",
						"          {gross income},",
						"          Rating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3, source5 lookup(select3@{Product line} == source5@{Product line},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup4",
						"lookup4 select(mapColumn(",
						"          {Invoice ID},",
						"          BranchID,",
						"          CustomerTypeID,",
						"          GenderID,",
						"          ProductLineID = ID,",
						"          {Unit price},",
						"          Quantity,",
						"          {Tax 5%},",
						"          Total,",
						"          Date,",
						"          Time,",
						"          Payment,",
						"          cogs,",
						"          {gross margin percentage},",
						"          {gross income},",
						"          Rating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, source6 lookup(select4@Payment == source6@Payment,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup5",
						"lookup5 select(mapColumn(",
						"          {Invoice ID},",
						"          BranchID,",
						"          CustomerTypeID,",
						"          GenderID,",
						"          ProductLineID,",
						"          {Unit price},",
						"          Quantity,",
						"          {Tax 5%},",
						"          Total,",
						"          Date,",
						"          Time,",
						"          PaymentTypeID = ID,",
						"          cogs,",
						"          {gross margin percentage},",
						"          {gross income},",
						"          Rating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SupermarketSales')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_BRANCH')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_CUSTOMER_TYPE')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_GENDER')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PRODUCT_LINE')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PAYMENT_TYPE')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_INVOICE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_payment_type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SupermarketSales",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PAYMENT_TYPE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Invoice ID} as string,",
						"          Branch as string,",
						"          City as string,",
						"          {Customer type} as string,",
						"          Gender as string,",
						"          {Product line} as string,",
						"          {Unit price} as string,",
						"          Quantity as string,",
						"          {Tax 5%} as string,",
						"          Total as string,",
						"          Date as string,",
						"          Time as string,",
						"          Payment as string,",
						"          cogs as string,",
						"          {gross margin percentage} as string,",
						"          {gross income} as string,",
						"          Rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(Payment),",
						"     Quantity = count(Quantity)) ~> aggregate1",
						"aggregate1 keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Payment",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SupermarketSales')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PAYMENT_TYPE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_product_line')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SupermarketSales",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_LINE",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Invoice ID} as string,",
						"          Branch as string,",
						"          City as string,",
						"          {Customer type} as string,",
						"          Gender as string,",
						"          {Product line} as string,",
						"          {Unit price} as string,",
						"          Quantity as string,",
						"          {Tax 5%} as string,",
						"          Total as string,",
						"          Date as string,",
						"          Time as string,",
						"          Payment as string,",
						"          cogs as string,",
						"          {gross margin percentage} as string,",
						"          {gross income} as string,",
						"          Rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy({Product line}),",
						"     Quantity = count(Quantity)) ~> aggregate1",
						"aggregate1 keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          {Product line}",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SupermarketSales')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PRODUCT_LINE')]"
			]
		}
	]
}